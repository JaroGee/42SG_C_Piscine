/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   rush.h.txt                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mgee <mgee@student.42singapore.sg>         +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/10/22 09:28:47 by mgee              +#+    #+#             */
/*   Updated: 2025/10/22 09:28:47 by mgee             ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

Line by line explanation:

Why this file exists

C files need a shared “dictionary” of what functions exist.
rush.h lists them, so any file can call any other safely.
It also centralizes the allowed headers
(unistd.h for write, stdlib.h for malloc/free).

---

#ifndef RUSH_H / #define RUSH_H … #endif

Include guard: if someone includes this file twice, the guard stops duplicate definitions.

Analogy: a doorman who says “You’re already inside; you don’t need another ticket.”

---

#include <unistd.h> / #include <stdlib.h>

Let the compiler know about write, malloc, free — the only allowed functions we use.

---

Function prototypes

These are promises that certain functions exist somewhere:

	•	I/O: ft_putchar, ft_putstr, ft_putnbr, print_grid

	•	Parsing: parse_clues_4x4 (read 16 numbers)

	•	Checks: row_has_dup, col_has_dup (catch duplicates early)

	•	Visibility: check_row_views, check_col_views (match clues)

	•	Solver: solve_cell (backtracking brain)

Analogy: a book’s table of contents — you can see what chapters are available and how to call them.