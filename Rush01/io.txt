/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   io.txt                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mgee <mgee@student.42singapore.sg>         +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/10/22 09:24:46 by mgee              +#+    #+#             */
/*   Updated: 2025/10/22 09:24:46 by mgee             ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

Line by line explanation:

Why this file exists

We’re not allowed to use printf, so we build tiny helpers using
write() to print characters, words, numbers, and finally the whole grid.

---

#include "rush.h"

Bring in our project’s declarations and allowed headers.

---

void ft_putchar(char c) { write(1, &c, 1); }

Print one character to the screen.

Analogy: drop exactly one letter into the output.

---

void ft_putstr(const char *s) { while (*s) write(1, s++, 1); }

Print a whole word or sentence by printing one character
at a time until we reach the end ('\0').

Analogy: feed a string through a label maker, one character at a time.

---

void ft_putnbr(int n) { char c = '0' + n; write(1, &c, 1); }

Convert a small number (1–4) to its character and print it.

Analogy: if n=3, turn it into the character '3' and print that.

---

void print_grid(int grid[4][4]) { ... }

Print the entire board nicely:

	•	Two loops: rows r=0..3, columns c=0..3.

	•	For each cell: print the number.

	•	If it’s not the last column, also print a space.
    
	•	After each row, print a newline.

Analogy: read the board like a book
—  left to right, top to bottom —
adding spaces between words and a new line after each sentence.
